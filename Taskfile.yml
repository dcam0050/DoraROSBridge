version: '3'

vars:
  BUILD_SCRIPTS_DIR: './build/scripts'
  NODES_DIR: './nodes'
  PYTHON_HELPERS_DIR: './python_helpers'

tasks:
  # Setup & Container Management
  setup:
    desc: Initial setup and environment preparation
    cmds:
      - '{{.BUILD_SCRIPTS_DIR}}/setup.sh'

  build:containers:
    desc: Build/rebuild containers
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        echo "🔨 Building/rebuilding permanent build containers..." && 
        docker rm -f dora-ros1-builder dora-ros2-builder 2>/dev/null || true &&
        docker rmi dora-ros1-builder dora-ros2-builder 2>/dev/null || true &&
        {{.BUILD_SCRIPTS_DIR}}/manage-containers.sh create'

  containers:status:
    desc: Show container status
    cmds:
      - '{{.BUILD_SCRIPTS_DIR}}/manage-containers.sh status'

  clean:containers:
    desc: Clean containers and cache
    cmds:
      - '{{.BUILD_SCRIPTS_DIR}}/manage-containers.sh cleanup'

  # Build Tasks (for development/debugging)
  build:
    desc: Build all components
    cmds:
      - '{{.BUILD_SCRIPTS_DIR}}/build-ros.sh ros1'
      - '{{.BUILD_SCRIPTS_DIR}}/build-ros.sh ros2'

  build:vision:
    desc: Build vision components only
    cmds:
      - '{{.BUILD_SCRIPTS_DIR}}/build-ros.sh ros1 ros1-image-source'
      - '{{.BUILD_SCRIPTS_DIR}}/build-ros.sh ros2 ros2-image-sink'

  build:tts:
    desc: Build TTS components only
    cmds:
      - '{{.BUILD_SCRIPTS_DIR}}/build-ros.sh ros1 ros1-tts-sink'
      - '{{.BUILD_SCRIPTS_DIR}}/build-ros.sh ros2 ros2-tts-source'

  build:audio:
    desc: Build audio components only
    cmds:
      - '{{.BUILD_SCRIPTS_DIR}}/build-ros.sh ros2 gstreamer-audio-receiver,ros2-audio-publisher,dora-audio-sink'

  build:custom:
    desc: Build custom messages
    cmds:
      - '{{.BUILD_SCRIPTS_DIR}}/build-custom-msgs.sh'
      - '{{.BUILD_SCRIPTS_DIR}}/build-ros.sh ros2 custom-message-test'

  # Run Tasks (run only - build separately if needed)
  run:vision:
    desc: Run image pipeline
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_dora && check_ros2 && check_ros1 && check_rqt_image_view && 
        echo "🚀 Starting image pipeline..." && 
        start_dora_dataflow {{.NODES_DIR}}/image/dataflow.image.yml "image pipeline"'

  run:vision:viewer:
    desc: Run image pipeline with viewer inside ROS2 Docker container
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_dora && check_ros2 && check_ros1 && 
        echo "🚀 Starting image pipeline with viewer inside ROS2 Docker..." && 
        echo "Starting ROS2 image viewer in background..." && 
        {{.BUILD_SCRIPTS_DIR}}/deploy-viewer.sh background &
        VIEWER_PID=$! && 
        sleep 5 && 
        echo "✅ Viewer started in container. Check for rqt_image_view window." &&
        echo "If you do not see the window, try looking behind other windows or check different workspaces" &&
        echo "Starting Dora image dataflow..." && 
        dora run {{.NODES_DIR}}/image/dataflow.image.yml'

  run:vision:viewer:host:
    desc: Run image pipeline with host viewer
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_dora && check_ros2 && check_ros1 && check_rqt_image_view && 
        echo "🚀 Starting image pipeline with viewer on host..." && 
        echo "Starting rqt_image_view on host..." && 
        ros2 run rqt_image_view rqt_image_view /camera/image_raw &
        sleep 2 && 
        start_dora_dataflow {{.NODES_DIR}}/image/dataflow.image.yml "image pipeline with host viewer"'

  deploy:viewer:
    desc: Deploy ROS2 image viewer (auto-detects GPU)
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_ros2 && 
        {{.BUILD_SCRIPTS_DIR}}/deploy-viewer.sh standalone'

  test:x11:
    desc: Basic X11 connectivity test
    cmds:
      - '{{.BUILD_SCRIPTS_DIR}}/test-x11.sh'

  test:gpu:
    desc: GPU configuration diagnostics
    cmds:
      - '{{.BUILD_SCRIPTS_DIR}}/check-gpu.sh'

  monitor:topics:
    desc: Monitor ROS2 topics (no GUI)
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_ros2 && 
        echo "📡 Monitoring ROS2 topics..." && 
        echo "ROS_DOMAIN_ID: ${ROS_DOMAIN_ID:-42}" &&
        echo "Available topics:" &&
        docker exec -e ROS_DOMAIN_ID=${ROS_DOMAIN_ID:-42} dora-ros2-builder bash -c "source /opt/ros/rolling/setup.bash && source /opt/ros2_ws/install/setup.bash && ros2 topic list" &&
        echo "" &&
        echo "Monitoring /camera/image_raw (press Ctrl+C to stop):" &&
        docker exec -e ROS_DOMAIN_ID=${ROS_DOMAIN_ID:-42} dora-ros2-builder bash -c "source /opt/ros/rolling/setup.bash && source /opt/ros2_ws/install/setup.bash && ros2 topic echo /camera/image_raw"'

  test:gui:
    desc: Test different ROS GUI applications
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_ros2 && 
        echo "🎨 Testing ROS GUI applications..." && 
        echo "" &&
        echo "Choose which GUI to test:" &&
        echo "1) rqt_graph - Shows ROS node graph" &&
        echo "2) rqt_image_view - Image viewer" &&
        echo "3) rviz2 - 3D visualization" &&
        echo "" &&
        read -p "Enter choice (1-3): " choice &&
        case $choice in
          1) echo "Testing rqt_graph..." && {{.BUILD_SCRIPTS_DIR}}/deploy-viewer.sh standalone rqt_graph ;;
          2) echo "Testing rqt_image_view..." && {{.BUILD_SCRIPTS_DIR}}/deploy-viewer.sh standalone ;;
          3) echo "Testing rviz2..." && {{.BUILD_SCRIPTS_DIR}}/deploy-viewer.sh standalone rviz2 ;;
          *) echo "Invalid choice" ;;
        esac'

  run:tts:
    desc: Run TTS system
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_dora && check_ros2 && check_ros1 && 
        echo "🚀 Starting TTS system..." && 
        echo "Starting remote TTS bridge..." && 
        ./python_helpers/deploy_and_run_remote.sh &
        TTS_PID=$! && 
        sleep 3 && 
        echo "Starting Dora TTS dataflow..." && 
        dora run {{.NODES_DIR}}/tts/dataflow.tts.yml &
        DORA_PID=$! && 
        echo "TTS system started successfully!" && 
        echo "Remote TTS bridge PID: $TTS_PID" && 
        echo "Dora dataflow PID: $DORA_PID" && 
        echo "Press Ctrl+C to stop both processes" && 
        trap "echo \"Stopping TTS system...\" && kill $DORA_PID 2>/dev/null || true && kill $TTS_PID 2>/dev/null || true && exit 0" SIGINT SIGTERM && wait'

  run:audio:
    desc: Run audio system
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_dora && check_ros2 && check_gstreamer && 
        echo "🚀 Starting audio system..." && 
        test_port 5004 udp && 
        start_dora_dataflow {{.NODES_DIR}}/audio/dataflow.audio.yml "audio streaming system"'

  run:custom:
    desc: Run custom message test
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_dora && check_ros2 && 
        echo "🚀 Starting custom message test..." && 
        AMENT_PREFIX_PATH="$(pwd)/custom_msgs/install:$AMENT_PREFIX_PATH" 
        start_dora_dataflow {{.NODES_DIR}}/custom/dataflow.custom.yml "custom message test system"'

  run:all:
    desc: Run complete system
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_dora && check_ros2 && check_ros1 && 
        echo "🚀 Starting complete system..." && 
        TTS_PID=$(deploy_tts_bridge) && sleep 2 && 
        echo "Starting image dataflow..." && 
        dora run {{.NODES_DIR}}/image/dataflow.image.yml & IMAGE_PID=$! &&
        echo "Complete system started successfully!" && 
        echo "Remote TTS bridge PID: $TTS_PID" && 
        echo "Image dataflow PID: $IMAGE_PID" && 
        echo "Press Ctrl+C to stop all processes" && 
        trap "cleanup && exit 0" SIGINT SIGTERM && wait'

  # Testing Tasks (for validation)
  test:release:
    desc: Test release package with Docker
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_docker && RELEASE_DIR="./release" && 
        if [ ! -d "$RELEASE_DIR" ]; then 
          error "Release directory not found. Run task create-release first."; 
          exit 1; 
        fi && 
        if [ ! -f "$RELEASE_DIR/bin/dora" ] || [ ! -f "$RELEASE_DIR/bin/ros1-image-source" ] || [ ! -f "$RELEASE_DIR/bin/ros2-image-sink" ]; then 
          error "Release binaries not found. Run task create-release first."; 
          exit 1; 
        fi && 
        echo "✅ Release package found and validated" && 
        echo "Starting ROS1 container..." && 
        docker run -d --name ros1-core --network host ros:noetic-ros-base roscore && 
        sleep 3 && 
        echo "Starting ROS2 container..." && 
        docker run -d --name ros2-daemon --network host ros:rolling-ros-base bash -c "ros2 daemon" && 
        sleep 3 && 
        echo "Running dataflow..." && 
        docker run --rm --network host -v "$RELEASE_DIR:/workspace" -w /workspace ubuntu:24.04 bash -c "export PATH=/workspace/bin:\$PATH && export LD_LIBRARY_PATH=/workspace/lib:\$LD_LIBRARY_PATH && echo Testing release package... && dora daemon --run-dataflow ./dataflow.image.yml" && 
        echo "Cleaning up containers..." && 
        docker stop ros1-core ros2-daemon 2>/dev/null || true && 
        docker rm ros1-core ros2-daemon 2>/dev/null || true && 
        echo "✅ Release package test completed"'

  test:metrics:
    desc: Test metrics setup
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_docker && check_docker_compose && 
        echo "🧪 Testing dora metrics setup..." && 
        echo "📊 Checking if metrics services are running..." && 
        if ! docker ps | grep -q "dora-influxdb"; then 
          echo "❌ InfluxDB is not running. Start with: task metrics:start"; 
          exit 1; 
        fi && 
        if ! docker ps | grep -q "dora-grafana"; then 
          echo "❌ Grafana is not running. Start with: task metrics:start"; 
          exit 1; 
        fi && 
        if ! docker ps | grep -q "dora-telegraf"; then 
          echo "❌ Telegraf is not running. Start with: task metrics:start"; 
          exit 1; 
        fi && 
        echo "✅ All metrics services are running" && 
        echo "🔍 Testing endpoint accessibility..." && 
        test_http_endpoint http://localhost:8086/health "InfluxDB" && 
        test_http_endpoint http://localhost:3000/api/health "Grafana" && 
        echo "✅ Telegraf OpenTelemetry endpoint is accessible at localhost:4317 (gRPC)" && 
        echo "" && 
        echo "🎯 Next steps:" && 
        echo "1. Start your dora dataflow: task run:all" && 
        echo "2. Open Grafana: http://localhost:3000 (admin/admin)" && 
        echo "3. View the Dora ROS Bridge Metrics dashboard"'

  # Metrics Tasks
  metrics:start:
    desc: Start metrics services
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_docker && check_docker_compose && 
        echo "Starting metrics services..." && 
        docker compose -f docker-compose.metrics.yml up -d && 
        echo "✅ Metrics services started" && 
        echo "Grafana: http://localhost:3000 (admin/admin)" && 
        echo "InfluxDB: http://localhost:8086" && 
        echo "Telegraf: localhost:4317 (gRPC)"'

  metrics:stop:
    desc: Stop metrics services
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_docker && check_docker_compose && 
        echo "Stopping metrics services..." && 
        docker compose -f docker-compose.metrics.yml down && 
        echo "✅ Metrics services stopped"'

  metrics:status:
    desc: Show metrics services status
    cmds:
      - |
        bash -c 'source {{.BUILD_SCRIPTS_DIR}}/common.sh && 
        check_docker && check_docker_compose && 
        echo "Metrics services status:" && 
        docker compose -f docker-compose.metrics.yml ps'

  # Cleanup Tasks
  clean:
    desc: Clean all build artifacts
    deps: [clean:rust, clean:custom, clean:containers]
    cmds:
      - |
        echo "✅ All clean tasks completed"

  clean:rust:
    desc: Clean Rust build artifacts only
    cmds:
      - |
        echo "Cleaning Rust build artifacts..." && 
        rm -rf target target-ros1 target-ros2 && 
        echo "✅ Rust build artifacts cleaned"

  clean:custom:
    desc: Clean custom messages build artifacts
    cmds:
      - |
        echo "Cleaning custom messages..." && 
        rm -rf custom_msgs/build custom_msgs/install && 
        echo "✅ Custom messages cleaned"

  # Release Tasks
  create-release:
    desc: Create release package
    cmds:
      - '{{.BUILD_SCRIPTS_DIR}}/create-release.sh'

  # Help
  help:
    desc: Show available tasks
    cmds:
      - |
        echo "🚀 ROS Bridge Tasks" && 
        echo "" && 
        echo "🔨 Build & Setup:" && 
        echo "  task setup             # Initial setup" && 
        echo "  task build:containers  # Build containers" && 
        echo "  task build             # Build all components" && 
        echo "" && 
        echo "🚀 Main Tasks:" && 
        echo "  task run:all           # Complete system" && 
        echo "  task run:vision        # Image pipeline" && 
        echo "  task run:vision:viewer # Image pipeline + viewer" && 
        echo "  task run:tts           # TTS system" && 
        echo "  task run:audio         # Audio system" && 
        echo "  task run:custom        # Custom messages" && 
        echo "" && 
        echo "📺 Viewer & Debug:" && 
        echo "  task deploy:viewer     # ROS2 viewer" && 
        echo "  task test:gui          # Test GUI apps" && 
        echo "  task monitor:topics    # Monitor topics" && 
        echo "  task test:gpu          # GPU diagnostics" && 
        echo "" && 
        echo "📊 Metrics:" && 
        echo "  task metrics:start     # Start metrics services" && 
        echo "  task metrics:stop      # Stop metrics services" && 
        echo "  task metrics:status    # Show metrics status" && 
        echo "  task test:metrics      # Test metrics setup" && 
        echo "" && 
        echo "🧹 Cleanup:" && 
        echo "  task clean             # Clean all build artifacts" && 
        echo "  task clean:rust        # Clean Rust artifacts only" && 
        echo "  task clean:custom      # Clean custom messages" && 
        echo "  task clean:containers # Clean up containers and cache" && 
        echo "" && 
        echo "📦 Release:" && 
        echo "  task create-release    # Create release package" && 
        echo "  task test:release      # Test release package" && 
        echo "" && 
        echo "💡 Quick Start:" && 
        echo "  1. task setup" && 
        echo "  2. task run:vision:viewer" && 
        echo "" && 
        echo "📖 For more details, see README.md"
